{"version":3,"sources":["logo.svg","components/layout/Navbar.js","components/layout/Header.js","components/pages/Home.js","components/pages/DefaultPage.js","components/Search.js","components/RecipeListItem.js","components/layout/Loader.js","config.js","components/RecipeList.js","components/pages/Recipes.js","components/pages/RecipeDetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","Menu","borderless","fixed","Item","Header","style","marginRight","src","logo","alt","as","Link","to","content","NavLink","props","className","bgClass","title","children","Home","Button","color","size","DefaultPage","Search","useState","query","setQuery","Grid","textAlign","columns","Column","Form","onSubmit","onSearch","Input","placeholder","action","icon","fluid","onChange","e","target","value","RecipeListItem","recipe","Card","image_url","height","Content","Description","publisher","extra","recipe_id","href","source_url","Loader","Image","centered","RECIPE_API","RecipeList","recipes","loading","state","setState","useEffect","getRecipes","a","url","fetch","response","json","result","console","log","Container","doubling","map","i","key","Recipes","Fragment","RecipeDetails","match","params","getRecipe","container","stackable","marginBottom","publisher_url","Segment","Group","ingredients","ingred","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84f95e89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.65c6cea3.svg\";","import React from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport logo from \"../../logo.svg\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <Menu borderless fixed=\"top\">\r\n      <Menu.Item>\r\n        <Menu.Header style={{ marginRight: \"25px\" }}>\r\n          <img src={logo} alt=\"logo\" />\r\n        </Menu.Header>\r\n      </Menu.Item>\r\n      <Menu.Item as={Link} to=\"/\" content=\"Home\" />\r\n      <Menu.Item as={NavLink} to=\"/recipes\" content=\"Recipes\" />\r\n    </Menu>\r\n  );\r\n}\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className={props.bgClass}>\r\n      <div className=\"text-content\">\r\n        <h1 className=\"header-title\">{props.title}</h1>\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport Header from \"../layout/Header\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <Header bgClass=\"bg-image\" title=\"Amazing Recipes\">\r\n      <Button\r\n        as={Link}\r\n        to=\"/recipes\"\r\n        color=\"linkedin\"\r\n        content=\"SEARCH RECIPES\"\r\n        size=\"big\"\r\n      />\r\n    </Header>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from \"../layout/Header\";\r\n\r\nfunction DefaultPage() {\r\n  return (\r\n    <Header bgClass=\"bg-default-image\" title=\"404\">\r\n      <p className=\"sub-text\">You are in the wrong place</p>\r\n      <Button as={Link} to=\"/\" color=\"grey\" content=\"RETURN HOME\" size=\"big\" />\r\n    </Header>\r\n  );\r\n}\r\nexport default DefaultPage;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Form, Input } from \"semantic-ui-react\";\r\n\r\nfunction Search(props) {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleChange = e => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    props.onSearch(query);\r\n  };\r\n\r\n  return (\r\n    <Grid textAlign=\"center\" columns={2} className=\"search-box\">\r\n      <Grid.Column>\r\n        <h2 className=\"search-heading\">\r\n          Search Recipes With{\" \"}\r\n          <span style={{ color: \"#ff3333\" }}>Food2Fork</span>\r\n        </h2>\r\n        <h4>Type Recipes Separated By Comma</h4>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Input\r\n            placeholder=\"chicken,onion,carrots\"\r\n            action={{ icon: \"search\", color: \"blue\" }}\r\n            fluid\r\n            onChange={handleChange}\r\n            value={query}\r\n          />\r\n        </Form>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Button } from \"semantic-ui-react\";\r\n\r\nfunction RecipeListItem({ recipe }) {\r\n  return (\r\n    <Card>\r\n      <img src={recipe.image_url} height={170} alt=\"thumbnail\" />\r\n      <Card.Content>\r\n        <Card.Header content={recipe.title} />\r\n        <Card.Description>\r\n          <h4 className=\"text-cursive txt-yellow\">{recipe.publisher}</h4>\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Button\r\n          as={Link}\r\n          to={`/recipes/${recipe.recipe_id}`}\r\n          content=\"Details\"\r\n          color=\"blue\"\r\n          size=\"tiny\"\r\n        />\r\n        <Button\r\n          as={\"a\"}\r\n          href={recipe.source_url}\r\n          target=\"_blank\"\r\n          content=\"Recipe URL\"\r\n          color=\"green\"\r\n          size=\"tiny\"\r\n        />\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\nexport default RecipeListItem;\r\n","import React from \"react\";\r\nimport { Image } from \"semantic-ui-react\";\r\n\r\nfunction Loader() {\r\n  return <Image src=\"/images/loader.gif\" centered />;\r\n}\r\nexport default Loader;\r\n","export const RECIPE_API = 'https://forkify-api.herokuapp.com/api';\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Container, Header, Grid } from 'semantic-ui-react';\r\nimport RecipeListItem from './RecipeListItem';\r\nimport Loader from './layout/Loader';\r\nimport { RECIPE_API } from '../config';\r\n\r\nfunction RecipeList(props) {\r\n  const [state, setState] = useState({ recipes: [], loading: false });\r\n\r\n  useEffect(() => {\r\n    getRecipes();\r\n    // eslint-disable-next-line\r\n  }, [props.query]);\r\n\r\n  const getRecipes = async () => {\r\n    try {\r\n      const url = `${RECIPE_API}/search?q=${props.query}`;\r\n      setState({ ...state, loading: true });\r\n      const response = await fetch(url);\r\n      const result = await response.json();\r\n      setState({ recipes: result.recipes, loading: false });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header\r\n        size=\"huge\"\r\n        content={props.query ? `RECIPE LIST FOR: ${props.query}` : 'RECIPE LIST'}\r\n        className=\"text-cursive\"\r\n        textAlign=\"center\"\r\n      />\r\n      {state.loading && <Loader />}\r\n      <Grid doubling columns={4}>\r\n        {state.recipes &&\r\n          state.recipes.map((recipe, i) => {\r\n            return (\r\n              <Grid.Column key={i}>\r\n                <RecipeListItem recipe={recipe} />\r\n              </Grid.Column>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\nexport default RecipeList;\r\n","import React, { useState } from \"react\";\r\nimport Search from \"../Search\";\r\nimport RecipeList from \"../RecipeList\";\r\n\r\nfunction Recipes() {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleSearch = query => {\r\n    setQuery(query);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Search onSearch={handleSearch} />\r\n      <RecipeList query={query} />\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default Recipes;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Grid, Button, Image, Header, Segment } from 'semantic-ui-react';\r\nimport Loader from '../layout/Loader';\r\nimport { RECIPE_API } from '../../config';\r\n\r\nfunction RecipeDetails(props) {\r\n  const [state, setState] = useState({ recipe: {}, loading: true });\r\n\r\n  useEffect(() => {\r\n    const getRecipe = async () => {\r\n      try {\r\n        const response = await fetch(`${RECIPE_API}/get?rId=${props.match.params.recipe_id}`);\r\n        const result = await response.json();\r\n        setState({ recipe: result.recipe, loading: false });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    getRecipe();\r\n    //eslint-disable-next-line\r\n  }, []);\r\n\r\n  if (state.recipe) {\r\n    return (\r\n      <Grid container stackable columns={2} className=\"detailPageContent\">\r\n        <Grid.Column>\r\n          <Button\r\n            as={Link}\r\n            to=\"/recipes\"\r\n            color=\"yellow\"\r\n            content=\"Back to recipe list\"\r\n            style={{ marginBottom: '3rem' }}\r\n          />\r\n          {state.loading && <Loader />}\r\n          <Image src={state.recipe.image_url} />\r\n        </Grid.Column>\r\n        <Grid.Column>\r\n          <Header size=\"medium\">{state.recipe.title}</Header>\r\n          <p className=\"text-cursive txt-yellow\">Provided By {state.recipe.publisher}</p>\r\n          <Button\r\n            as=\"a\"\r\n            href={state.recipe.publisher_url}\r\n            target=\"_blank\"\r\n            color=\"blue\"\r\n            content=\"Publisher Webpage\"\r\n          />\r\n          <Button\r\n            as=\"a\"\r\n            href={state.recipe.source_url}\r\n            target=\"_blank\"\r\n            color=\"green\"\r\n            content=\"Recipe URL\"\r\n          />\r\n\r\n          <Header size=\"large\" content=\"Ingredients\" />\r\n          <Segment.Group>\r\n            {state.recipe.ingredients &&\r\n              state.recipe.ingredients.map((ingred, i) => (\r\n                <Segment key={i}>\r\n                  <h5 className=\"text-cursive\">{ingred}</h5>\r\n                </Segment>\r\n              ))}\r\n          </Segment.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  } else {\r\n    return (\r\n      <Grid container stackable columns={2} className=\"detailPageContent\">\r\n        <Header>Nothing found !!</Header>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\nexport default RecipeDetails;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./components/layout/Navbar\";\r\nimport Home from \"./components/pages/Home\";\r\nimport DefaultPage from \"./components/pages/DefaultPage\";\r\nimport Recipes from \"./components/pages/Recipes\";\r\nimport RecipeDetails from \"./components/pages/RecipeDetails\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/recipes\" component={Recipes} />\r\n          <Route exact path=\"/recipes/:recipe_id\" component={RecipeDetails} />\r\n          <Route component={DefaultPage} />\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}